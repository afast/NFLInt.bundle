import json

NFL_VIDEOS_JSON				= 'http://www.nfl.com/static/embeddablevideo/%s.json'
NFL_VIDEOS_URL				= 'http://a.video.nfl.com/'
NFL_NETWORK_SCHEDULE		= 'http://www.locatetv.com/listings/nflnet'
####################################################################################################
def MetadataObjectForURL(url):
	
	if url.startswith("http://a.video.nfl.com"):
		new_url = url.split("#")
		streamid = new_url[1]
		json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)
		sTitle = json['briefHeadline']
		sSummary = json['caption']
		sThumb = json['imagePaths']['m']
		
		return VideoClipObject(
			title = sTitle,
			summary = sSummary,
			thumb = sThumb,
		)

#################################################
	if url.startswith("http://static.now.nfl.com"):
		new_url = url.replace("jpg", "json")
		json = JSON.ObjectFromURL(new_url)
		sTitle = json['shortHeadline']
		sSummary = json['summary']
		sThumb = json['cdnData']['videoImageUrl']
	
		return VideoClipObject(
			title = sTitle,
			summary = sSummary,
			thumb = sThumb,
		)

#################################################
	if url.startswith("http://nfl"):
		return VideoClipObject(
			title = "NFL Now Live"
		)
		
#################################################
	if url.endswith("redzone"):
		return VideoClipObject(
        	title = "NFL Redzone"
    	)

#################################################
	if url.endswith("nflnetwork"):
		
                onnow = ""
                timestarted = ""
		
                nextstarted = ""
                onnext = ""
		
		return VideoClipObject(
			title = "NFL Network",
    		summary = "Started at " + timestarted + " " + onnow + "\nNext at " + nextstarted +" " + onnext
     	)
     		
#################################################
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?nfnas="):
	
		new_url = url.split("#")
		titlevid = new_url[1]
	
		return VideoClipObject(
        	title = titlevid
    	)

#################################################
	if url.startswith("http://game"):
		return VideoClipObject(
        	title = "NFL Gamepass"
    	)

####################################################################################################
def MediaObjectsForURL(url):

	if Prefs['gplivebitrate'] == "4500":
		VidRes = '720'
	if Prefs['gplivebitrate'] == "3000":
		VidRes = '540'
	if Prefs['gplivebitrate'] == "2400":
		VidRes = '540'
	if Prefs['gplivebitrate'] == "1600":
		VidRes = '360'
	if Prefs['gplivebitrate'] == "1200":
		VidRes = '360'
	if Prefs['gplivebitrate'] == "800":
		VidRes = '224'
	if Prefs['gplivebitrate'] == "400":
		VidRes = '224'

	if url.startswith("http://a.video.nfl.com"):
		return [
			MediaObject(
				bitrate = 3000,
				video_resolution = '720',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '3000'))]				
			),
			MediaObject(
				bitrate = 2000,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '2000'))]				
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '1200'))]				
			),
			MediaObject(
				bitrate = 700,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '700'))]				
			),
			MediaObject(
				bitrate = 500, 
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '500'))]				
			)
		]

#################################################

	if url.startswith("http://static.now.nfl.com"):
		return [
			MediaObject(
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNow, url = url)))]
			)
		]

#################################################

	if url.startswith("http://nfl"):
		return [
			MediaObject(
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNowLive, url = url)))]
			)
		]

#################################################
	
	if url.endswith("nflnetwork"):
		if Prefs['gplivebitrate'] == "Auto":
			return [
				MediaObject(
					bitrate = 1600,
					video_resolution = '540',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '1600')))]
				),
				MediaObject(
					bitrate = 1200,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '1200')))]
				),
				MediaObject(
					bitrate = 800,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '800')))]
				),
				MediaObject(
					bitrate = 400,
					video_resolution = '224',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '400')))]
				)
			]
		else:
			return [
				MediaObject(
					bitrate = int(Prefs['gplivebitrate']),
					video_resolution = VidRes,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = Prefs['gplivebitrate'])))]
				)
			]
			
#################################################
			
	if url.endswith("Live"):
		if Prefs['gplivebitrate'] == "Auto":
			return [
				MediaObject(
					bitrate = 4500,
					video_resolution = '720',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '4500')))]
				),
				MediaObject(
					bitrate = 3000,
					video_resolution = '540',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '3000')))]
				),
				MediaObject(
					bitrate = 2400,
					video_resolution = '540',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '2400')))]
			),
				MediaObject(
					bitrate = 1600,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1600')))]
				),
				MediaObject(
					bitrate = 1200,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1200')))]
				),
				MediaObject(
					bitrate = 800,
					video_resolution = '224',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '800')))]
				),
				MediaObject(
					bitrate = 400,
					video_resolution = '224',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '400')))]
				)
			]
		else:
			return [
				MediaObject(
					bitrate = int(Prefs['gplivebitrate']),
					video_resolution = VidRes,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = Prefs['gplivebitrate'])))]
				)
			]
	else:	
		return [
			MediaObject(
				bitrate = 4500,
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '4500')))]
				),
			MediaObject(
				bitrate = 3000,
				video_resolution = '540',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '3000')))]
			),
			MediaObject(
				bitrate = 2400,
				video_resolution = '540',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '2400')))]
			),
			MediaObject(
				bitrate = 1600,
				video_resolution = '360',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1600')))]
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = '360',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1200')))]
			),
			MediaObject(
				bitrate = 800,
				video_resolution = '224',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '800')))]
			),
			MediaObject(
				bitrate = 400,
				video_resolution = '224',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '400')))]
			)
		]
		
####################################################################################################
def PlayVideo(url, bitrate):
	
	new_url = url.split("#")
	streamid = new_url[1]
	json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)

	mp4_url3000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-1]['path']
	mp4_url2000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-2]['path']
	mp4_url1200 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-3]['path']
	mp4_url700 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-4]['path']
	mp4_url500 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-5]['path']
	
	if bitrate == '3000':
		return Redirect(mp4_url3000)
	elif bitrate == '2000':
		return Redirect(mp4_url2000)
	elif bitrate == '1200':
		return Redirect(mp4_url1200)
	elif bitrate == '700':
		return Redirect(mp4_url700)
	elif bitrate == '500':
		return Redirect(mp4_url500)
	
####################################################################################################
@indirect
def PlayVideoGP(url, bitrate):
	
        Log.Debug("===================== play nfl game " + url + "========== " + bitrate + " ============")
	headers_value = {'User-Agent' : 'iPhone'}
	if url.startswith("http://game"):
		Log.Debug("Logging in play video GP")
		username = Prefs['username']
		password = Prefs['password']
	
		if url.startswith("http://gamepass.nfl.com"):
                        Log.Debug("logging in http://game")
			authentication_url = "https://gamepass.nfl.com/secure/authenticate"
			post_values = {
				'username' : username,
				'password' : password,
				'cookielink' : True
				}	
			login = HTTP.Request(url=authentication_url, values=post_values, headers=headers_value, cacheTime=0).content
			Log.Debug(login)

		if url.startswith("http://gamerewind.nfl.com"):
			authentication_url = "https://gamepass.nfl.com/secure/authenticate"
			post_values = {
				'username' : username,
				'password' : password,
				'cookielink' : True
				}
			login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content
	
	if url.endswith("nflredzone"):
                Log.Debug("===================== play nfl redzone " + url + "========== " + bitrate + " ============")
                Log.Debug("Logging in NFL redzone")
                username = Prefs['username']
                password = Prefs['password']

                authentication_url = "https://gamepass.nfl.com/secure/authenticate"
                post_values = {
                        'username' : username,
                        'password' : password,
			'cookielink' : True
                        }

                login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content

                Log.Debug("NFL Redzone Live")
                cookie_values = HTTP.CookiesForURL("https://gamepass.nfl.com")
                headers_value = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
                publish_url = "https://gamepass.nfl.com/service/publishpoint?type=channel&id=2&format=json"
                m3u8_pagedata = HTTP.Request(url=publish_url, headers=headers_value).content
                m3u8_page = json.loads(m3u8_pagedata)
                m3u8_url = m3u8_page['path']
				
	else:
		Log.Debug("NFL Gamepass/Rewind Game")
		new_url = url.replace("#Condensed", "").replace("#Live", "").replace("nflgr", "nflgp").replace("gamerewind", "gamepass")
		Log.Debug(new_url)
		cookie_values = HTTP.CookiesForURL("https://gamepass.nfl.com")
		Log.Debug(cookie_values)
	
		live_game_id = new_url.replace("http://gamepass.nfl.com/game/", "")
					
		if url.endswith("#Live"):
			publish_url2 = "https://gamepass.nfl.com/service/publishpoint?type=game&gs=3&gt=1&format=json&id=" + live_game_id
			publish_url = "https://gamepass.nfl.com/service/publishpoint?type=game&gs=1&gt=1&format=json&id=" + live_game_id
		elif url.endswith("#Condensed"):
			publish_url2 = "https://gamepass.nfl.com/service/publishpoint?type=game&gs=3&gt=8&format=json&id=" + live_game_id
			publish_url = "https://gamepass.nfl.com/service/publishpoint?type=game&gs=3&gt=8&format=json&id=" + live_game_id
		else:
			publish_url2 = "https://gamepass.nfl.com/service/publishpoint?type=game&gs=3&gt=1&format=json&id=" + live_game_id
			publish_url = "https://gamepass.nfl.com/service/publishpoint?type=game&gs=3&gt=1&format=json&id=" + live_game_id


		headers_value2 = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
		m3u8_page = JSON.ObjectFromURL(publish_url, headers=headers_value2)
		m3u8_url = m3u8_page['path']

	if Prefs['multi_playlist']:
		final_m3u8_url = m3u8_url
	else:
		final_m3u8_url = m3u8_url.replace("iphone", bitrate + "_iphone")

        return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(final_m3u8_url))

####################################################################################################
@indirect
def PlayVideoNFLN(url, bitrate):

        Log.Debug("===================== play nfl network " + url + "========== " + bitrate + " ============")
	Log.Debug("Logging in NFL network")

	username = Prefs['username']
	password = Prefs['password']

	authentication_url = "https://gamepass.nfl.com/secure/authenticate"
	post_values = {
		'username' : username,
		'password' : password,
		'cookielink' : True
		}

	login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content

	Log.Debug("NFL Network Live")
	cookie_values = HTTP.CookiesForURL("https://gamepass.nfl.com/")
	headers_value = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
	HTTP.Headers['Cookie'] = cookie_values
	publish_url = "https://gamepass.nfl.com/service/publishpoint?type=channel&id=1&format=json"

	m3u8_page = JSON.ObjectFromURL(publish_url, headers=headers_value)
	m3u8_url = m3u8_page['path']

	Log.Debug(m3u8_url)

	if Prefs['multi_playlist']:
		final_m3u8_url = m3u8_url
	else:
		final_m3u8_url = m3u8_url.replace("iphone", bitrate + "_iphone")
	
	Log.Debug(final_m3u8_url)
        return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(final_m3u8_url))

####################################################################################################
@indirect
def PlayVideoNFLNow(url):

	new_url = url.replace("jpg", "json")
	json = JSON.ObjectFromURL(new_url)
	m3u8 = json['cdnData']['videoUrl']
	return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8))
####################################################################################################
@indirect
def PlayVideoNFLNowLive(url):

	new_url = url.split("#")
	m3u8 = new_url[0]
	return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8))
